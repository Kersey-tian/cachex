package com.alibaba.cacher.support.shooting;

import com.alibaba.cacher.exception.CacherException;
import com.google.common.base.Splitter;
import com.google.common.base.Strings;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;

import javax.annotation.PreDestroy;
import javax.sql.DataSource;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;
import java.util.stream.Stream;

/**
 * @author jifang.zjf
 * @since 2017/6/9 下午12:35.
 */
public class DerbyShootingMXBeanImpl extends AbstractDBShootingMXBean {

    private static final String DERBY_JAR_PATTERN = "%s/../db/lib/derby.jar";

    private static final String[] classPaths = {
            "sun.boot.class.path",
            "java.ext.dirs",
            "java.class.path"
    };

    private static final String DERBY_POM_JAR_REGEX = ".*/derby-([\\d\\.]+)\\.jar";

    public DerbyShootingMXBeanImpl() {
        this(System.getProperty("user.home") + "/.Derby");
    }

    public DerbyShootingMXBeanImpl(String derbyFilePath) {
        super(derbyFilePath);
    }

    @Override
    protected Supplier<JdbcOperations> operationsSupplier(String dbPath) {
        return () -> {
            registerDriver();
            SingleConnectionDataSource dataSource = new SingleConnectionDataSource();
            dataSource.setUrl(String.format("jdbc:derby:%s;create=true", dbPath));
            JdbcOperations jdbcOperations = new JdbcTemplate(dataSource);
            try {
                if (isTableNotExists(dataSource)) {
                    jdbcOperations.execute("CREATE TABLE T_HIT_RATE (" +
                            "id            BIGINT PRIMARY KEY       GENERATED BY DEFAULT AS IDENTITY," +
                            "pattern       VARCHAR(64) NOT NULL UNIQUE," +
                            "hit_count     BIGINT      NOT NULL     DEFAULT 0," +
                            "require_count BIGINT      NOT NULL     DEFAULT 0," +
                            "version       BIGINT      NOT NULL     DEFAULT 0)");
                }
            } catch (SQLException e) {
                throw new CacherException(e);
            }

            return jdbcOperations;
        };
    }

    private boolean isTableNotExists(DataSource dataSource) throws SQLException {
        return !dataSource
                .getConnection()
                .getMetaData()
                .getTables(null, null, "T_HIT_RATE", new String[]{"TABLE"})
                .next();
    }

    @Override
    protected Stream<AbstractDBShootingMXBean.DataDO> transferResults(List<Map<String, Object>> mapResults) {
        return mapResults.stream().map((map) -> {
            DataDO data = new DataDO();
            data.setPattern((String) map.get("PATTERN"));
            data.setHitCount((long) map.get("HIT_COUNT"));
            data.setRequireCount((long) map.get("REQUIRE_COUNT"));
            data.setVersion((long) map.get("VERSION"));
            return data;
        });
    }

    @PreDestroy
    public void tearDown() {
        super.tearDown();
    }

    // --------------------- //
    // -- 注册Derby Driver -- //
    // --------------------- //
    private void registerDriver() {
        // 如果当前classpath下没有derby jar包, 则动态加载JAVA_HOME下的jar
        if (!containsDerbyJar()) {
            String jarFilePath = String.format(DERBY_JAR_PATTERN, System.getProperty("java.home"));
            if (new File(jarFilePath).exists()) {
                loadJar(jarFilePath);
            }
        }

        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
        } catch (ClassNotFoundException e) {
            throw new CacherException("derby.jar is not in classpath and not in $JAVA_HOME/db/lib directory", e);
        }
    }

    private boolean containsDerbyJar() {

        boolean contains = false;
        for (int i = 0; !contains && i < classPaths.length; ++i) {
            String jarStr;
            if (!Strings.isNullOrEmpty(jarStr = System.getProperty(classPaths[i]))) {
                for (String jar : Splitter.on(":").split(jarStr)) {
                    if (jar.matches(DERBY_POM_JAR_REGEX)) {
                        contains = true;
                        break;
                    }
                }
            }
        }

        return contains;
    }

    private void loadJar(String javaFile) {
        URLClassLoader loader = (URLClassLoader) ClassLoader.getSystemClassLoader();

        Method addURLMethod = null;
        try {
            addURLMethod = URLClassLoader.class.getDeclaredMethod("addURL", URL.class);
        } catch (NoSuchMethodException ignored) {
        }
        assert addURLMethod != null;
        addURLMethod.setAccessible(true);
        try {
            addURLMethod.invoke(loader, new URL("file://" + javaFile));
        } catch (IllegalAccessException | InvocationTargetException | MalformedURLException ignored) {
        }
    }
}
